/* soapStub.h
   Generated by gSOAP 2.8.106 for GSoapServer.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#pragma once

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 208106
# error "GSOAP VERSION 208106 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

struct AddResponse;	/* GSoapServer.h:2 */
struct Add;	/* GSoapServer.h:2 */
struct SubResponse;	/* GSoapServer.h:3 */
struct Sub;	/* GSoapServer.h:3 */
struct MulResponse;	/* GSoapServer.h:4 */
struct Mul;	/* GSoapServer.h:4 */
struct DivResponse;	/* GSoapServer.h:5 */
struct Div;	/* GSoapServer.h:5 */

/* GSoapServer.h:2 */
#ifndef SOAP_TYPE_AddResponse
#define SOAP_TYPE_AddResponse (9)
/* complex XML schema type 'AddResponse': */
struct SOAP_CMAC AddResponse {
      public:
        /** Optional element 'pResult' of XML schema type 'xsd:int' */
        int *pResult;
      public:
        /** Return unique type id SOAP_TYPE_AddResponse */
        long soap_type() const { return SOAP_TYPE_AddResponse; }
        /** Constructor with member initializations */
        AddResponse() : pResult() { }
        /** Friend allocator */
        friend SOAP_FMAC1 AddResponse * SOAP_FMAC2 soap_instantiate_AddResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* GSoapServer.h:2 */
#ifndef SOAP_TYPE_Add
#define SOAP_TYPE_Add (10)
/* complex XML schema type 'Add': */
struct SOAP_CMAC Add {
      public:
        /** Required element 'nNum1' of XML schema type 'xsd:int' */
        int nNum1;
        /** Required element 'nNum2' of XML schema type 'xsd:int' */
        int nNum2;
      public:
        /** Return unique type id SOAP_TYPE_Add */
        long soap_type() const { return SOAP_TYPE_Add; }
        /** Constructor with member initializations */
        Add() : nNum1(), nNum2() { }
        /** Friend allocator */
        friend SOAP_FMAC1 Add * SOAP_FMAC2 soap_instantiate_Add(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* GSoapServer.h:3 */
#ifndef SOAP_TYPE_SubResponse
#define SOAP_TYPE_SubResponse (12)
/* complex XML schema type 'SubResponse': */
struct SOAP_CMAC SubResponse {
      public:
        /** Optional element 'pResult' of XML schema type 'xsd:int' */
        int *pResult;
      public:
        /** Return unique type id SOAP_TYPE_SubResponse */
        long soap_type() const { return SOAP_TYPE_SubResponse; }
        /** Constructor with member initializations */
        SubResponse() : pResult() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SubResponse * SOAP_FMAC2 soap_instantiate_SubResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* GSoapServer.h:3 */
#ifndef SOAP_TYPE_Sub
#define SOAP_TYPE_Sub (13)
/* complex XML schema type 'Sub': */
struct SOAP_CMAC Sub {
      public:
        /** Required element 'nNum1' of XML schema type 'xsd:int' */
        int nNum1;
        /** Required element 'nNum2' of XML schema type 'xsd:int' */
        int nNum2;
      public:
        /** Return unique type id SOAP_TYPE_Sub */
        long soap_type() const { return SOAP_TYPE_Sub; }
        /** Constructor with member initializations */
        Sub() : nNum1(), nNum2() { }
        /** Friend allocator */
        friend SOAP_FMAC1 Sub * SOAP_FMAC2 soap_instantiate_Sub(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* GSoapServer.h:4 */
#ifndef SOAP_TYPE_MulResponse
#define SOAP_TYPE_MulResponse (15)
/* complex XML schema type 'MulResponse': */
struct SOAP_CMAC MulResponse {
      public:
        /** Optional element 'pResult' of XML schema type 'xsd:int' */
        int *pResult;
      public:
        /** Return unique type id SOAP_TYPE_MulResponse */
        long soap_type() const { return SOAP_TYPE_MulResponse; }
        /** Constructor with member initializations */
        MulResponse() : pResult() { }
        /** Friend allocator */
        friend SOAP_FMAC1 MulResponse * SOAP_FMAC2 soap_instantiate_MulResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* GSoapServer.h:4 */
#ifndef SOAP_TYPE_Mul
#define SOAP_TYPE_Mul (16)
/* complex XML schema type 'Mul': */
struct SOAP_CMAC Mul {
      public:
        /** Required element 'nNum1' of XML schema type 'xsd:int' */
        int nNum1;
        /** Required element 'nNum2' of XML schema type 'xsd:int' */
        int nNum2;
      public:
        /** Return unique type id SOAP_TYPE_Mul */
        long soap_type() const { return SOAP_TYPE_Mul; }
        /** Constructor with member initializations */
        Mul() : nNum1(), nNum2() { }
        /** Friend allocator */
        friend SOAP_FMAC1 Mul * SOAP_FMAC2 soap_instantiate_Mul(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* GSoapServer.h:5 */
#ifndef SOAP_TYPE_DivResponse
#define SOAP_TYPE_DivResponse (18)
/* complex XML schema type 'DivResponse': */
struct SOAP_CMAC DivResponse {
      public:
        /** Optional element 'pResult' of XML schema type 'xsd:int' */
        int *pResult;
      public:
        /** Return unique type id SOAP_TYPE_DivResponse */
        long soap_type() const { return SOAP_TYPE_DivResponse; }
        /** Constructor with member initializations */
        DivResponse() : pResult() { }
        /** Friend allocator */
        friend SOAP_FMAC1 DivResponse * SOAP_FMAC2 soap_instantiate_DivResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* GSoapServer.h:5 */
#ifndef SOAP_TYPE_Div
#define SOAP_TYPE_Div (19)
/* complex XML schema type 'Div': */
struct SOAP_CMAC Div {
      public:
        /** Required element 'nNum1' of XML schema type 'xsd:int' */
        int nNum1;
        /** Required element 'nNum2' of XML schema type 'xsd:int' */
        int nNum2;
      public:
        /** Return unique type id SOAP_TYPE_Div */
        long soap_type() const { return SOAP_TYPE_Div; }
        /** Constructor with member initializations */
        Div() : nNum1(), nNum2() { }
        /** Friend allocator */
        friend SOAP_FMAC1 Div * SOAP_FMAC2 soap_instantiate_Div(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* GSoapServer.h:5 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (20)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* GSoapServer.h:5 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (21)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* GSoapServer.h:5 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (23)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* GSoapServer.h:5 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (26)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* GSoapServer.h:5 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (27)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (27)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (26)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (23)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (21)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (20)
#endif

/* struct Div has binding name 'Div' for type 'Div' */
#ifndef SOAP_TYPE_Div
#define SOAP_TYPE_Div (19)
#endif

/* struct DivResponse has binding name 'DivResponse' for type 'DivResponse' */
#ifndef SOAP_TYPE_DivResponse
#define SOAP_TYPE_DivResponse (18)
#endif

/* struct Mul has binding name 'Mul' for type 'Mul' */
#ifndef SOAP_TYPE_Mul
#define SOAP_TYPE_Mul (16)
#endif

/* struct MulResponse has binding name 'MulResponse' for type 'MulResponse' */
#ifndef SOAP_TYPE_MulResponse
#define SOAP_TYPE_MulResponse (15)
#endif

/* struct Sub has binding name 'Sub' for type 'Sub' */
#ifndef SOAP_TYPE_Sub
#define SOAP_TYPE_Sub (13)
#endif

/* struct SubResponse has binding name 'SubResponse' for type 'SubResponse' */
#ifndef SOAP_TYPE_SubResponse
#define SOAP_TYPE_SubResponse (12)
#endif

/* struct Add has binding name 'Add' for type 'Add' */
#ifndef SOAP_TYPE_Add
#define SOAP_TYPE_Add (10)
#endif

/* struct AddResponse has binding name 'AddResponse' for type 'AddResponse' */
#ifndef SOAP_TYPE_AddResponse
#define SOAP_TYPE_AddResponse (9)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (29)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (28)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (22)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (7)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    
    /** Web service synchronous operation 'soap_call_Add' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call_Add(struct soap *soap, const char *soap_endpoint, const char *soap_action, int nNum1, int nNum2, int *pResult);
    /** Web service asynchronous operation 'soap_send_Add' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send_Add(struct soap *soap, const char *soap_endpoint, const char *soap_action, int nNum1, int nNum2);
    /** Web service asynchronous operation 'soap_recv_Add' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv_Add(struct soap *soap, int *pResult);
    
    /** Web service synchronous operation 'soap_call_Sub' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call_Sub(struct soap *soap, const char *soap_endpoint, const char *soap_action, int nNum1, int nNum2, int *pResult);
    /** Web service asynchronous operation 'soap_send_Sub' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send_Sub(struct soap *soap, const char *soap_endpoint, const char *soap_action, int nNum1, int nNum2);
    /** Web service asynchronous operation 'soap_recv_Sub' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv_Sub(struct soap *soap, int *pResult);
    
    /** Web service synchronous operation 'soap_call_Mul' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call_Mul(struct soap *soap, const char *soap_endpoint, const char *soap_action, int nNum1, int nNum2, int *pResult);
    /** Web service asynchronous operation 'soap_send_Mul' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send_Mul(struct soap *soap, const char *soap_endpoint, const char *soap_action, int nNum1, int nNum2);
    /** Web service asynchronous operation 'soap_recv_Mul' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv_Mul(struct soap *soap, int *pResult);
    
    /** Web service synchronous operation 'soap_call_Div' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call_Div(struct soap *soap, const char *soap_endpoint, const char *soap_action, int nNum1, int nNum2, int *pResult);
    /** Web service asynchronous operation 'soap_send_Div' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send_Div(struct soap *soap, const char *soap_endpoint, const char *soap_action, int nNum1, int nNum2);
    /** Web service asynchronous operation 'soap_recv_Div' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv_Div(struct soap *soap, int *pResult);

/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/

    /** Web service operation 'Add' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 Add(struct soap*, int nNum1, int nNum2, int *pResult);
    /** Web service operation 'Sub' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 Sub(struct soap*, int nNum1, int nNum2, int *pResult);
    /** Web service operation 'Mul' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 Mul(struct soap*, int nNum1, int nNum2, int *pResult);
    /** Web service operation 'Div' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 Div(struct soap*, int nNum1, int nNum2, int *pResult);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_Add(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_Sub(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_Mul(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_Div(struct soap*);

#endif

/* End of soapStub.h */
